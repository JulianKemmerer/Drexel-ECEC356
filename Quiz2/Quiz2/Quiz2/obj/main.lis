 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area data(ram, con, rel)
 0000                   .dbfile ./main.c
 0000           _ten_ms_counter::
 0000 00                .byte 0
 0001                   .dbfile Z:\Quiz2\Quiz2\Quiz2\main.c
 0001                   .dbsym e ten_ms_counter _ten_ms_counter c
                        .area data(ram, con, rel)
 0000                   .dbfile Z:\Quiz2\Quiz2\Quiz2\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile Z:\Quiz2\Quiz2\Quiz2\main.c
 0000           _bPulseWidth::
 0000 00                .byte 0
 0001                   .dbsym e bPulseWidth _bPulseWidth c
                        .area data(ram, con, rel)
 0000                   .dbfile Z:\Quiz2\Quiz2\Quiz2\main.c
                        .area text(rom, con, rel)
 0000                   .dbfile Z:\Quiz2\Quiz2\Quiz2\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000                   .dbline 17
 0000           ; //----------------------------------------------------------------------------
 0000           ; // C main line
 0000           ; //----------------------------------------------------------------------------
 0000           ; 
 0000           ; //Julian Kemmerer
 0000           ; //Quiz 2
 0000           ; //ECEC 356
 0000           ; //PWM is malfunctioning... not processing interrupt
 0000           ; 
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0000           ; 
 0000           ; extern char ten_ms_counter = 0;
 0000           ; extern char bPulseWidth = 0;
 0000           ; 
 0000           ; void main(void)
 0000           ; {
 0000                   .dbline 18
 0000           ;       M8C_EnableGInt; // Uncomment this line to enable Global Interrupts
 0000 7101                      or  F, 01h
 0002           
 0002                   .dbline 19
 0002           ;       CPU_F |= 0b00000001;
 0002 43F701            or REG[0xf7],1
 0005                   .dbline 20
 0005           ;       INT_MSK1 |= 0b00000001;
 0005 43E101            or REG[0xe1],1
 0008                   .dbline 24
 0008           ;       //Insert your main routine code here.
 0008           ;       
 0008           ;       //Enable PWM
 0008           ;       PWM_Start();
 0008 10                push X
 0009 7C0000            xcall _PWM_Start
 000C                   .dbline 25
 000C           ;       PWM_EnableInt();
 000C 7C0000            xcall _PWM_EnableInt
 000F                   .dbline 29
 000F           ;       
 000F           ;       
 000F           ;       //Enable LCD for debugging
 000F           ;       LCD_Start();
 000F 7C0000            xcall _LCD_Start
 0012                   .dbline 30
 0012           ;       LCD_Init();
 0012 7C0000            xcall _LCD_Init
 0015 20                pop X
 0016 803B              xjmp L3
 0018           L2:
 0018                   .dbline 34
 0018           ;       
 0018           ;       
 0018           ;       while(1)//Control loop
 0018           ;       {
 0018                   .dbline 35
 0018           ;               LCD_Position(0,0);
 0018 10                push X
 0019 5000              mov A,0
 001B 5C                mov X,A
 001C 7C0000            xcall _LCD_Position
 001F                   .dbline 36
 001F           ;               LCD_PrHexByte(PWM_bReadPulseWidth());
 001F 7C0000            xcall _PWM_bReadPulseWidth
 0022 62D000            mov REG[0xd0],>__r0
 0025 20                pop X
 0026 10                push X
 0027 7C0000            xcall _LCD_PrHexByte
 002A 20                pop X
 002B                   .dbline 37
 002B           ;               LCD_Position(1,0);
 002B 10                push X
 002C 5700              mov X,0
 002E 5001              mov A,1
 0030 7C0000            xcall _LCD_Position
 0033 20                pop X
 0034                   .dbline 38
 0034           ;               LCD_PrHexByte(ten_ms_counter);
 0034 10                push X
 0035 62D000            mov REG[0xd0],>_ten_ms_counter
 0038 5100              mov A,[_ten_ms_counter]
 003A 7C0000            xcall _LCD_PrHexByte
 003D 20                pop X
 003E                   .dbline 39
 003E           ;               LCD_Position(0,6);
 003E 10                push X
 003F 5706              mov X,6
 0041 5000              mov A,0
 0043 7C0000            xcall _LCD_Position
 0046                   .dbline 40
 0046           ;               LCD_PrHexByte(PWM_bReadCounter()); 
 0046 7C0000            xcall _PWM_bReadCounter
 0049 62D000            mov REG[0xd0],>__r0
 004C 20                pop X
 004D 10                push X
 004E 7C0000            xcall _LCD_PrHexByte
 0051 20                pop X
 0052                   .dbline 41
 0052           ;       }//End Control Loop
 0052           L3:
 0052                   .dbline 33
 0052 8FC5              xjmp L2
 0054           X0:
 0054                   .dbline -2
 0054           L1:
 0054                   .dbline 0 ; func end
 0054 8FFF              jmp .
 0056                   .dbend
 0056                   .dbfunc e PWM10ms _PWM10ms fV
 0056           _PWM10ms::
 0056                   .dbline -1
 0056 71C0              or F,-64
 0058 08                push A
 0059 5DD0              mov A,REG[0xd0]
 005B 08                push A
 005C 5DD3              mov A,REG[0xd3]
 005E 08                push A
 005F 5DD4              mov A,REG[0xd4]
 0061 08                push A
 0062 5DD5              mov A,REG[0xd5]
 0064 08                push A
 0065 62D000            mov REG[0xd0],>__r0
 0068 5100              mov A,[__r0]
 006A 08                push A
 006B 5100              mov A,[__r1]
 006D 08                push A
 006E 5100              mov A,[__r2]
 0070 08                push A
 0071 5100              mov A,[__r3]
 0073 08                push A
 0074 5100              mov A,[__r4]
 0076 08                push A
 0077 5100              mov A,[__r5]
 0079 08                push A
 007A 5100              mov A,[__r6]
 007C 08                push A
 007D 5100              mov A,[__r7]
 007F 08                push A
 0080 5100              mov A,[__r8]
 0082 08                push A
 0083 5100              mov A,[__r9]
 0085 08                push A
 0086 5100              mov A,[__r10]
 0088 08                push A
 0089 5100              mov A,[__r11]
 008B 08                push A
 008C 5100              mov A,[__rX]
 008E 08                push A
 008F 5100              mov A,[__rY]
 0091 08                push A
 0092 5100              mov A,[__rZ]
 0094 08                push A
 0095                   .dbline 46
 0095           ; }
 0095           ; 
 0095           ; #pragma interrupt_handler PWM10ms
 0095           ; void PWM10ms(void)
 0095           ; {
 0095                   .dbline 48
 0095           ;       //Clear the pending interrupt
 0095           ;       INT_CLR1 &= ~0b00000001;
 0095 41DBFE            and REG[0xdb],-2
 0098                   .dbline 51
 0098           ; 
 0098           ;       //Increment count between 0 and 4 (5 resets to 0)
 0098           ;       ten_ms_counter = ten_ms_counter + 1;
 0098 62D000            mov REG[0xd0],>_ten_ms_counter
 009B 7600              inc [_ten_ms_counter]
 009D                   .dbline 52
 009D           ;       if(ten_ms_counter>=5)
 009D 3C0005            cmp [_ten_ms_counter],5
 00A0 C007              jc L6
 00A2           X1:
 00A2                   .dbline 53
 00A2           ;       {
 00A2                   .dbline 54
 00A2           ;               ten_ms_counter = 0;
 00A2 62D000            mov REG[0xd0],>_ten_ms_counter
 00A5 550000            mov [_ten_ms_counter],0
 00A8                   .dbline 55
 00A8           ;       }
 00A8           L6:
 00A8                   .dbline 58
 00A8           ;       
 00A8           ;       //Check state of count
 00A8           ;       if(ten_ms_counter <= 0)
 00A8 62D000            mov REG[0xd0],>_ten_ms_counter
 00AB 5000              mov A,0
 00AD 3A00              cmp A,[_ten_ms_counter]
 00AF C009              jc L8
 00B1           X2:
 00B1                   .dbline 59
 00B1           ;       {
 00B1                   .dbline 61
 00B1           ;               //Low output (0% duty cycle)
 00B1           ;               bPulseWidth = (char)0;
 00B1 62D000            mov REG[0xd0],>_bPulseWidth
 00B4 550000            mov [_bPulseWidth],0
 00B7                   .dbline 62
 00B7           ;       }
 00B7 8045              xjmp L9
 00B9           L8:
 00B9                   .dbline 63
 00B9           ;       else if(ten_ms_counter == 1)
 00B9 62D000            mov REG[0xd0],>_ten_ms_counter
 00BC 3C0001            cmp [_ten_ms_counter],1
 00BF B009              jnz L10
 00C1                   .dbline 64
 00C1           ;       {
 00C1                   .dbline 66
 00C1           ;               //High output (100% duty cycle)
 00C1           ;               bPulseWidth = (char)255;
 00C1 62D000            mov REG[0xd0],>_bPulseWidth
 00C4 5500FF            mov [_bPulseWidth],-1
 00C7                   .dbline 67
 00C7           ;       }
 00C7 8035              xjmp L11
 00C9           L10:
 00C9                   .dbline 68
 00C9           ;       else if(ten_ms_counter == 2)
 00C9 62D000            mov REG[0xd0],>_ten_ms_counter
 00CC 3C0002            cmp [_ten_ms_counter],2
 00CF B009              jnz L12
 00D1                   .dbline 69
 00D1           ;       {
 00D1                   .dbline 71
 00D1           ;               //Low
 00D1           ;               bPulseWidth = (char)0;
 00D1 62D000            mov REG[0xd0],>_bPulseWidth
 00D4 550000            mov [_bPulseWidth],0
 00D7                   .dbline 72
 00D7           ;       }
 00D7 8025              xjmp L13
 00D9           L12:
 00D9                   .dbline 73
 00D9           ;       else if(ten_ms_counter >= 3)
 00D9 62D000            mov REG[0xd0],>_ten_ms_counter
 00DC 3C0003            cmp [_ten_ms_counter],3
 00DF C009              jc L14
 00E1           X3:
 00E1                   .dbline 74
 00E1           ;       {
 00E1                   .dbline 76
 00E1           ;               //High
 00E1           ;               bPulseWidth = (char)255;
 00E1 62D000            mov REG[0xd0],>_bPulseWidth
 00E4 5500FF            mov [_bPulseWidth],-1
 00E7                   .dbline 77
 00E7           ;       }
 00E7 8015              xjmp L15
 00E9           L14:
 00E9                   .dbline 79
 00E9           ;       else
 00E9           ;       {
 00E9                   .dbline 81
 00E9           ;               //Error
 00E9           ;               LCD_Position(0,0);
 00E9 10                push X
 00EA 5000              mov A,0
 00EC 5C                mov X,A
 00ED 7C0000            xcall _LCD_Position
 00F0 20                pop X
 00F1                   .dbline 82
 00F1           ;               LCD_PrCString("Error!");
 00F1 10                push X
 00F2 5000              mov A,>L16
 00F4 08                push A
 00F5 5000              mov A,<L16
 00F7 5C                mov X,A
 00F8 18                pop A
 00F9 7C0000            xcall _LCD_PrCString
 00FC 20                pop X
 00FD                   .dbline 83
 00FD           ;       }
 00FD           L15:
 00FD           L13:
 00FD           L11:
 00FD           L9:
 00FD                   .dbline 84
 00FD           ;       PWM_WritePulseWidth(bPulseWidth);
 00FD 10                push X
 00FE 62D000            mov REG[0xd0],>_bPulseWidth
 0101 5100              mov A,[_bPulseWidth]
 0103 7C0000            xcall _PWM_WritePulseWidth
 0106 20                pop X
 0107                   .dbline -2
 0107           L5:
 0107 62D000            mov REG[0xD0],>__r0
 010A 18                pop A
 010B 5300              mov [__rZ],A
 010D 18                pop A
 010E 5300              mov [__rY],A
 0110 18                pop A
 0111 5300              mov [__rX],A
 0113 18                pop A
 0114 5300              mov [__r11],A
 0116 18                pop A
 0117 5300              mov [__r10],A
 0119 18                pop A
 011A 5300              mov [__r9],A
 011C 18                pop A
 011D 5300              mov [__r8],A
 011F 18                pop A
 0120 5300              mov [__r7],A
 0122 18                pop A
 0123 5300              mov [__r6],A
 0125 18                pop A
 0126 5300              mov [__r5],A
 0128 18                pop A
 0129 5300              mov [__r4],A
 012B 18                pop A
 012C 5300              mov [__r3],A
 012E 18                pop A
 012F 5300              mov [__r2],A
 0131 18                pop A
 0132 5300              mov [__r1],A
 0134 18                pop A
 0135 5300              mov [__r0],A
 0137 18                pop A
 0138 60D5              mov REG[213],A
 013A 18                pop A
 013B 60D4              mov REG[212],A
 013D 18                pop A
 013E 60D3              mov REG[211],A
 0140 18                pop A
 0141 60D0              mov REG[208],A
 0143 18                pop A
 0144                   .dbline 0 ; func end
 0144 7E                reti
 0145                   .dbend
                        .area lit(rom, con, rel)
 0000           L16:
 0000 4572726F722100    .byte 'E,'r,'r,'o,'r,33,0
