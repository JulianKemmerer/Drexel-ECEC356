//*****************************************************************************
//*****************************************************************************
//  FILENAME: PWM.h
//   Version: 2.60, Updated on 2011/3/29 at 14:30:52
//  Generated by PSoC Designer 5.1.2110.0
//
//  DESCRIPTION: PWM8 User Module C Language interface file
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef PWM_INCLUDE
#define PWM_INCLUDE

#include <m8c.h>

#pragma fastcall16 PWM_EnableInt
#pragma fastcall16 PWM_DisableInt
#pragma fastcall16 PWM_Start
#pragma fastcall16 PWM_Stop
#pragma fastcall16 PWM_bReadCounter              // Read  DR0
#pragma fastcall16 PWM_WritePeriod               // Write DR1
#pragma fastcall16 PWM_bReadPulseWidth           // Read  DR2
#pragma fastcall16 PWM_WritePulseWidth           // Write DR2

// The following symbols are deprecated.
// They may be omitted in future releases
//
#pragma fastcall16 bPWM_ReadCounter              // Read  DR0 (Deprecated)
#pragma fastcall16 bPWM_ReadPulseWidth           // Read  DR2 (Deprecated)


//-------------------------------------------------
// Prototypes of the PWM API.
//-------------------------------------------------

extern void PWM_EnableInt(void);                        // Proxy Class 1
extern void PWM_DisableInt(void);                       // Proxy Class 1
extern void PWM_Start(void);                            // Proxy Class 1
extern void PWM_Stop(void);                             // Proxy Class 1
extern BYTE PWM_bReadCounter(void);                     // Proxy Class 2
extern void PWM_WritePeriod(BYTE bPeriod);              // Proxy Class 1
extern BYTE PWM_bReadPulseWidth(void);                  // Proxy Class 1
extern void PWM_WritePulseWidth(BYTE bPulseWidth);      // Proxy Class 1

// The following functions are deprecated.
// They may be omitted in future releases
//
extern BYTE bPWM_ReadCounter(void);            // Deprecated
extern BYTE bPWM_ReadPulseWidth(void);         // Deprecated


//--------------------------------------------------
// Constants for PWM API's.
//--------------------------------------------------

#define PWM_CONTROL_REG_START_BIT              ( 0x01 )
#define PWM_INT_REG_ADDR                       ( 0x0e1 )
#define PWM_INT_MASK                           ( 0x01 )


//--------------------------------------------------
// Constants for PWM user defined values
//--------------------------------------------------

#define PWM_PERIOD                             ( 0xff )
#define PWM_PULSE_WIDTH                        ( 0x80 )


//-------------------------------------------------
// Register Addresses for PWM
//-------------------------------------------------

#pragma ioport  PWM_COUNTER_REG:    0x020                  //DR0 Count register
BYTE            PWM_COUNTER_REG;
#pragma ioport  PWM_PERIOD_REG: 0x021                      //DR1 Period register
BYTE            PWM_PERIOD_REG;
#pragma ioport  PWM_COMPARE_REG:    0x022                  //DR2 Compare register
BYTE            PWM_COMPARE_REG;
#pragma ioport  PWM_CONTROL_REG:    0x023                  //Control register
BYTE            PWM_CONTROL_REG;
#pragma ioport  PWM_FUNC_REG:   0x120                      //Function register
BYTE            PWM_FUNC_REG;
#pragma ioport  PWM_INPUT_REG:  0x121                      //Input register
BYTE            PWM_INPUT_REG;
#pragma ioport  PWM_OUTPUT_REG: 0x122                      //Output register
BYTE            PWM_OUTPUT_REG;
#pragma ioport  PWM_INT_REG:       0x0e1                   //Interrupt Mask Register
BYTE            PWM_INT_REG;


//-------------------------------------------------
// PWM Macro 'Functions'
//-------------------------------------------------

#define PWM_Start_M \
   PWM_CONTROL_REG |=  PWM_CONTROL_REG_START_BIT

#define PWM_Stop_M  \
   PWM_CONTROL_REG &= ~PWM_CONTROL_REG_START_BIT

#define PWM_EnableInt_M   \
   M8C_EnableIntMask(PWM_INT_REG, PWM_INT_MASK)

#define PWM_DisableInt_M  \
   M8C_DisableIntMask(PWM_INT_REG, PWM_INT_MASK)

#endif
// end of file PWM.h
